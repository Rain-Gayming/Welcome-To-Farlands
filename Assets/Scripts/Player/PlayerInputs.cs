//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""27f950a5-fa29-4680-8bbf-6d33693631e2"",
            ""actions"": [
                {
                    ""name"": ""Walking"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bdb7dc9d-3a94-4a08-9e82-9e433d8deab5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jumping"",
                    ""type"": ""Button"",
                    ""id"": ""df817f70-d79b-4a84-81dc-40ef378ddd05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouching"",
                    ""type"": ""Button"",
                    ""id"": ""a9ab4f5f-5b77-4988-a6ef-90f29d3f6bde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Looking"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5dc94096-2f1e-4d8b-b751-9da28d835411"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprinting"",
                    ""type"": ""Button"",
                    ""id"": ""2bc2ba48-ac0e-4829-ab92-7759829bd1e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f283e74-1a1e-40a0-9d5e-d793cd0610f6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Jumping"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ee40205-52f3-485e-a405-d436df309a5a"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Crouching"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""895ff291-beb8-4f65-b96c-e49849a59ab7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""baafbd43-58be-4c45-b2d9-cbd62e738a8a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6f726267-d998-4c81-82eb-358bcfd7f5b5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ff4a387d-d290-4d85-a878-57cadceff978"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bd58d7f0-5e55-4ed1-a911-4cb388d3082f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0cd8739c-10f2-4234-bd60-89f83f14cb43"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Looking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a15921d7-fc92-48cd-88bc-0733db8c37d9"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Sprinting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""33c46d17-a645-4592-9937-4a47e42d9ddc"",
            ""actions"": [
                {
                    ""name"": ""Shooting"",
                    ""type"": ""Button"",
                    ""id"": ""c25ba05d-bebc-44f3-97cc-9bfe4a5dcc79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aiming"",
                    ""type"": ""Button"",
                    ""id"": ""d157b3f5-3f59-417c-90a7-c8ebb3affac8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeFireMode"",
                    ""type"": ""Button"",
                    ""id"": ""83c667db-897c-4011-9db0-65646b51751f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""40a1f8c5-2875-4948-80d3-c397e57c9a1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""98b38edf-927b-49e3-9880-d22a3fc47bc7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Shooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff24b352-5a8b-4ce0-8732-56ed9032d03f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51f6a65e-4355-459d-b3d5-f593789658ed"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""ChangeFireMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f2c3781-db9d-497c-b4ec-a61f8d12d21d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Walking = m_Movement.FindAction("Walking", throwIfNotFound: true);
        m_Movement_Jumping = m_Movement.FindAction("Jumping", throwIfNotFound: true);
        m_Movement_Crouching = m_Movement.FindAction("Crouching", throwIfNotFound: true);
        m_Movement_Looking = m_Movement.FindAction("Looking", throwIfNotFound: true);
        m_Movement_Sprinting = m_Movement.FindAction("Sprinting", throwIfNotFound: true);
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Shooting = m_Combat.FindAction("Shooting", throwIfNotFound: true);
        m_Combat_Aiming = m_Combat.FindAction("Aiming", throwIfNotFound: true);
        m_Combat_ChangeFireMode = m_Combat.FindAction("ChangeFireMode", throwIfNotFound: true);
        m_Combat_Reload = m_Combat.FindAction("Reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Walking;
    private readonly InputAction m_Movement_Jumping;
    private readonly InputAction m_Movement_Crouching;
    private readonly InputAction m_Movement_Looking;
    private readonly InputAction m_Movement_Sprinting;
    public struct MovementActions
    {
        private @PlayerInputs m_Wrapper;
        public MovementActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walking => m_Wrapper.m_Movement_Walking;
        public InputAction @Jumping => m_Wrapper.m_Movement_Jumping;
        public InputAction @Crouching => m_Wrapper.m_Movement_Crouching;
        public InputAction @Looking => m_Wrapper.m_Movement_Looking;
        public InputAction @Sprinting => m_Wrapper.m_Movement_Sprinting;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Walking.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnWalking;
                @Walking.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnWalking;
                @Walking.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnWalking;
                @Jumping.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJumping;
                @Jumping.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJumping;
                @Jumping.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJumping;
                @Crouching.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnCrouching;
                @Crouching.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnCrouching;
                @Crouching.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnCrouching;
                @Looking.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnLooking;
                @Looking.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnLooking;
                @Looking.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnLooking;
                @Sprinting.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnSprinting;
                @Sprinting.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnSprinting;
                @Sprinting.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnSprinting;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walking.started += instance.OnWalking;
                @Walking.performed += instance.OnWalking;
                @Walking.canceled += instance.OnWalking;
                @Jumping.started += instance.OnJumping;
                @Jumping.performed += instance.OnJumping;
                @Jumping.canceled += instance.OnJumping;
                @Crouching.started += instance.OnCrouching;
                @Crouching.performed += instance.OnCrouching;
                @Crouching.canceled += instance.OnCrouching;
                @Looking.started += instance.OnLooking;
                @Looking.performed += instance.OnLooking;
                @Looking.canceled += instance.OnLooking;
                @Sprinting.started += instance.OnSprinting;
                @Sprinting.performed += instance.OnSprinting;
                @Sprinting.canceled += instance.OnSprinting;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Combat
    private readonly InputActionMap m_Combat;
    private ICombatActions m_CombatActionsCallbackInterface;
    private readonly InputAction m_Combat_Shooting;
    private readonly InputAction m_Combat_Aiming;
    private readonly InputAction m_Combat_ChangeFireMode;
    private readonly InputAction m_Combat_Reload;
    public struct CombatActions
    {
        private @PlayerInputs m_Wrapper;
        public CombatActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shooting => m_Wrapper.m_Combat_Shooting;
        public InputAction @Aiming => m_Wrapper.m_Combat_Aiming;
        public InputAction @ChangeFireMode => m_Wrapper.m_Combat_ChangeFireMode;
        public InputAction @Reload => m_Wrapper.m_Combat_Reload;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void SetCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterface != null)
            {
                @Shooting.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnShooting;
                @Shooting.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnShooting;
                @Shooting.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnShooting;
                @Aiming.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnAiming;
                @Aiming.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnAiming;
                @Aiming.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnAiming;
                @ChangeFireMode.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnChangeFireMode;
                @ChangeFireMode.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnChangeFireMode;
                @ChangeFireMode.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnChangeFireMode;
                @Reload.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnReload;
            }
            m_Wrapper.m_CombatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shooting.started += instance.OnShooting;
                @Shooting.performed += instance.OnShooting;
                @Shooting.canceled += instance.OnShooting;
                @Aiming.started += instance.OnAiming;
                @Aiming.performed += instance.OnAiming;
                @Aiming.canceled += instance.OnAiming;
                @ChangeFireMode.started += instance.OnChangeFireMode;
                @ChangeFireMode.performed += instance.OnChangeFireMode;
                @ChangeFireMode.canceled += instance.OnChangeFireMode;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
            }
        }
    }
    public CombatActions @Combat => new CombatActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnWalking(InputAction.CallbackContext context);
        void OnJumping(InputAction.CallbackContext context);
        void OnCrouching(InputAction.CallbackContext context);
        void OnLooking(InputAction.CallbackContext context);
        void OnSprinting(InputAction.CallbackContext context);
    }
    public interface ICombatActions
    {
        void OnShooting(InputAction.CallbackContext context);
        void OnAiming(InputAction.CallbackContext context);
        void OnChangeFireMode(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
}
